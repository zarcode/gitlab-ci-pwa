{"version":3,"sources":["components/Login/index.js","utils/index.js","components/Layout/index.js","configureStore.js","App.js","serviceWorker.js","index.js"],"names":["require","clientId","siteUrl","Login","_ref2","hash","loginURL","concat","react_default","a","createElement","href","hashFunction","object","h32","JSON","stringify","toString","fakeAuth","isAuthenticated","authenticate","cb","this","setTimeout","signout","Protected","connect","state","_ref","urlParams","URLSearchParams","window","location","search","accessToken","get","stateHashParam","stateHash","console","log","Fragment","BrowserRouter","Route","path","component","components_Login","rootEpic","x","appReducer","arguments","length","undefined","test","store","epicMiddleware","createEpicMiddleware","middleWares","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","apply","run","configureStore","App","es","components_Layout","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yXAIEA,EAAQ,IAFJC,aAAUC,YAkBDC,MAdf,SAAAC,GAAyB,IAARC,EAAQD,EAARC,KACPC,EAAW,gDAAAC,OAAgDN,EAAhD,kBAAAM,OAAyEL,GAAzE,8BAAAK,OACaF,GAC9B,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,KAAGC,KAAML,GAAT,qBCXHM,EAAe,SAAAC,GAC3B,OAAOC,cACY,kBAAXD,EAAsBA,EAASE,KAAKC,UAAUH,GACrD,OACCI,SAAS,KCMNC,EAAW,CACfC,iBAAiB,EACjBC,aAFe,SAEFC,GACXC,KAAKH,iBAAkB,EACvBI,WAAWF,EAAI,MAEjBG,QANe,SAMPH,GACNC,KAAKH,iBAAkB,EACvBI,WAAWF,EAAI,OAInB,SAASI,IACP,OAAOjB,EAAAC,EAAAC,cAAA,uBAsCMgB,kBAPf,SAAyBC,GACxB,MAAO,CACNA,MAAOA,IAK+B,KAAzBD,CAnCf,SAAAE,GAA2B,IAATD,EAASC,EAATD,MACVE,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAChDC,EAAcL,EAAUM,IAAI,gBAC5BC,EAAiBP,EAAUM,IAAI,SAC/BE,EAAYzB,EAAae,GAS/B,OAPAW,QAAQC,IAAI,cAAeH,GAC3BE,QAAQC,IAAI,aAAcF,GAEvBH,GAAeE,IAAmBC,GACnCnB,EAASE,aAAa,cAItBZ,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+B,SAAA,KACItB,EAASC,gBAGTX,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWnB,MAJ/BjB,EAAAC,EAAAC,cAACmC,EAAD,CAAOxC,KAAMgC,sBCnCfS,EAAW,SAAAC,GAAC,OAAIA,GAChBC,EAAa,WAAuC,IAAtCrB,EAAsCsB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA9B,CAAEG,KAAM,SAAsBH,UAAAC,OAAA,GAAAD,UAAA,GACxD,OAAOtB,GCNH0B,EDSN,WACI,IAAMC,EAAiBC,cAEnBC,EAAiC,CACrCF,GAGIG,EAAmB1B,OAAO2B,sCAAwCC,IAGlEN,EAAQO,YAAYZ,EAAkCS,EACxDI,IAAeC,WAAf,EAAmBN,KAKrB,OAFAF,EAAeS,IAAIjB,GAEZO,ECzBGW,GAQCC,EANH,kBACVzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAUb,MAAOA,GACf7C,EAAAC,EAAAC,cAACyD,EAAD,QCGgBC,QACW,cAA7BrC,OAAOC,SAASqC,UAEe,UAA7BtC,OAAOC,SAASqC,UAEhBtC,OAAOC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.72507954.chunk.js","sourcesContent":["import React from 'react';\n\nlet { clientId, siteUrl } = \n  process.env.NODE_ENV === 'production' ? \n  require('../../config.prod.json') : require('../../config.dev.json');\n\nfunction Login({ hash }) {\n    const loginURL = `https://gitlab.com/oauth/authorize?client_id=${clientId}&redirect_uri=${siteUrl}` + \n    `&response_type=token&state=${hash}`;\n    return (\n        <div>\n            <ul>\n                <li>\n                <a href={loginURL}>Login</a>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Login;","import {h32} from \"xxhashjs\";\n\nexport const hashFunction = object => {\n\treturn h32(\n\t\ttypeof object === \"string\" ? object : JSON.stringify(object),\n\t\t0xabcd\n\t).toString(16);\n};","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport Login from '../Login';\nimport { hashFunction } from '../../utils';\n\nconst fakeAuth = {\n  isAuthenticated: false,\n  authenticate(cb) {\n    this.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n  signout(cb) {\n    this.isAuthenticated = false;\n    setTimeout(cb, 100);\n  }\n};\n\nfunction Protected() {\n  return <h3>Protected</h3>;\n}\n\nfunction Layout({ state }) {\n  const urlParams = new URLSearchParams(window.location.search);\n  const accessToken = urlParams.get(\"access_token\");\n  const stateHashParam = urlParams.get(\"state\");\n  const stateHash = hashFunction(state);\n\n  console.log(\"from params\", stateHashParam);\n  console.log(\"from state\", stateHash);\n\n  if(accessToken && stateHashParam === stateHash) {\n    fakeAuth.authenticate(() => {})\n  }\n  \n  return (\n    <>\n      {!fakeAuth.isAuthenticated ? (\n        <Login hash={stateHash}/>\n      ) : (\n        <Router>\n          <div>\n            <Route path=\"/\" component={Protected} />\n          </div>\n        </Router>\n      )}\n    </>\n  );\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\tstate: state,\n\t};\n};\n\n\nexport default connect(mapStateToProps, null)(Layout);\n","/* @flow */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport type { Middleware } from 'redux';\n\n// import rootEpic from './epics/';\n// import appReducer from './reducers';\n\nconst rootEpic = x => x;\nconst appReducer = (state = { test: \"hello\" }, action) => {\n  return state;\n};\n\nexport default () => {\n    const epicMiddleware = createEpicMiddleware();\n\n  const middleWares: Array<Middleware> = [\n    epicMiddleware,\n  ];\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  /* eslint-enable */\n\n  const store = createStore(appReducer, /* preloadedState, */ composeEnhancers(\n      applyMiddleware(...middleWares)\n      ));\n    \n    epicMiddleware.run(rootEpic);\n\n    return store;\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Layout from './components/Layout/index';\nimport configureStore from './configureStore';\n\nconst store = configureStore();\n\nconst App = () => (\n  <Provider store={store}>\n    <Layout />\n  </Provider>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}