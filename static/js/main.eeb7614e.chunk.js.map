{"version":3,"sources":["components/Login/index.js","actions/auth.js","actions/projects.js","components/Projects/index.js","actions/schema.js","actions/pipelines.js","reducers/pipelines.js","components/Project/index.js","components/Layout/index.js","api/index.js","epics/auth.js","localStorage.js","epics/index.js","epics/projects.js","epics/pipelines.js","reducers/auth.js","reducers/projects.js","reducers/index.js","reducers/user.js","configureStore.js","App.js","serviceWorker.js","index.js"],"names":["require","clientId","siteUrl","Login","_ref2","hash","loginURL","concat","react_default","a","createElement","href","login","token","type","logout","fetchProjects","connect","state","projects","auth","dispatch","actions","bindActionCreators","_ref","useEffect","isAuthenticated","loading","Fragment","list","map","item","key","id","Link","to","name_with_namespace","pipelines","schema","Entity","fetchPipelines","projectId","initialState","byId","ids","getLoadingState","getPipelines","createSelector","allIds","allById","match","history","compose","chain","safe","isNumber","parseInt","propPath","stateHash","urlParams","URLSearchParams","window","location","accessToken","get","stateHashParam","BrowserRouter","onClick","Switch","Route","exact","path","component","Projects","Project","components_Login","handleResponse","raw","then","response","ok","Error","statusText","r","json","getRequest","url","Object","objectWithoutProperties","fetch","headers","Authorization","fetchUser","props","objectSpread","console","log","userId","rest","_ref3","fetchPipeline","_ref4","pipelineId","save","_ref5","value","serializedState","JSON","stringify","localStorage","setItem","saveState","_unused","combineEpics","action$","pipe","filter","switchMap","from","api","user","of","catchError","e","error","message","action","ofType","data","normalize","apply","toConsumableArray","pipeline","arguments","length","undefined","combineReducers","entities","result","persistedState","getItem","parse","err","loadState","store","epicMiddleware","createEpicMiddleware","middleWares","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","appReducer","applyMiddleware","run","rootEpic","configureStore","App","es","components_Layout","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eeb7614e.chunk.js","sourcesContent":["import React from 'react';\n\nlet { clientId, siteUrl } = \n  process.env.NODE_ENV === 'production' ? \n  require('../../config.prod.json') : require('../../config.dev.json');\n\nfunction Login({ hash }) {\n    const loginURL = `https://gitlab.com/oauth/authorize?client_id=${clientId}&redirect_uri=${siteUrl}` + \n    `&response_type=token&state=${hash}`;\n    return (\n        <div>\n            <ul>\n                <li>\n                <a href={loginURL}>Login</a>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Login;","export const login = (token) => ({\n    type: 'LOGIN_REQUESTED',\n    token,\n});\n\nexport const loginSuccess = (token) => ({\n    type: 'LOGIN_SUCCESS',\n    token,\n});\n\nexport const logout = () => ({\n    type: 'LOGOUT',\n});\n\nexport const fetchUser = () => ({\n    type: 'FETCH_USER',\n  });\n\nexport const userSuccess = (response) => ({\n        type: 'FETCH_USER_SUCCESS',\n        response,\n    });\n\nexport const userFail = (error) => ({\n    type: 'FETCH_USER_FAIL',\n    error,\n});\n  ","export const fetchProjects = () => ({\n  type: 'FETCH_PROJECTS',\n});\n\nexport const projectsSuccess = (response) => { \n  return ({\n    type: 'FETCH_PROJECTS_SUCCESS',\n    response,\n  });\n}\nexport const projectsFail = (error) => ({\n  type: 'FETCH_PROJECTS_FAIL',\n  error,\n});","import React, { useEffect } from 'react';\nimport {\n  Link,\n} from \"react-router-dom\";\nimport { bindActionCreators } from 'redux';\nimport {connect} from \"react-redux\";\nimport { fetchProjects } from '../../actions/projects';\n\nfunction Projects({ projects, auth, actions }) {\n  useEffect(() => {\n    //todo: fetchProjects will get called twice \n    // if response was [] on login\n    if(auth.isAuthenticated && !projects.loading) {\n      actions.fetchProjects();\n    }\n  }, []);\n  return (\n    <>\n      <h2>Projects</h2>\n      {projects.list.map(item => (\n        <h3 key={item.id}>\n          <Link to={`/project/${item.id}`}>\n            {item.name_with_namespace}\n          </Link>\n        </h3>\n      ))}\n    </>\n  );\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n    projects: state.projects,\n    auth: state.auth,\n\t};\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return { \n    actions: bindActionCreators({ fetchProjects }, dispatch),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects);","import { schema } from 'normalizr';\n\nexport const pipeline = new schema.Entity('pipeline');\n\nexport const pipelines = [pipeline];","import { normalize } from 'normalizr';\nimport * as schema from './schema';\n\nexport const fetchPipelines = (projectId) => ({\n  type: 'FETCH_PIPELINES',\n  projectId,\n});\n\nexport const pipelinesSuccess = (response) => { \n  return ({\n    type: 'FETCH_PIPELINES_SUCCESS',\n    response: normalize(response, schema.pipelines),\n  });\n}\nexport const pipelinesFail = (error) => ({\n  type: 'FETCH_PIPELINES_FAIL',\n  error,\n});\n\nexport const fetchPipeline = (pipelineId) => ({\n  type: 'FETCH_PIPELINE',\n  pipelineId,\n});\n\nexport const pipelineSuccess = (response) => { \n  return ({\n    type: 'FETCH_PIPELINE_SUCCESS',\n    response\n  });\n}\nexport const pipelineFail = (error) => ({\n  type: 'FETCH_PIPELINE_FAIL',\n  error,\n});","import { createSelector } from 'reselect';\nconst initialState = {\n  byId: {},\n  ids: [],\n  loading: false,\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_PIPELINES':\n      return {\n        ...state,\n        loading: true,\n      }\n    case 'FETCH_PIPELINES_SUCCESS':\n      return {\n        byId: {\n          ...state.byId,\n          ...action.response.entities.pipeline,\n        },\n        ids: [\n          ...state.ids,\n          ...action.response.result,\n        ],\n        loading: false,\n      };\n    case 'FETCH_PIPELINES_FAIL':\n      return {\n        ...state,\n        loading: false,\n      }\n    default:\n      return state;\n  }\n};\n\nexport const getById = (state: any) => state.pipelines.byId;\nexport const getIds = (state: any) => state.pipelines.ids;\nexport const getLoadingState = (state: any) => state.pipelines.loading;\nexport const getPipelines = createSelector([getIds, getById], (allIds, allById) =>\nallIds.map(id => allById[id]));\n  ","import React, { useEffect } from 'react';\nimport { bindActionCreators } from 'redux';\nimport {\n  Link,\n} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport propPath from 'crocks/Maybe/propPath';\nimport safe from 'crocks/Maybe/safe';\nimport isNumber from 'crocks/predicates/isNumber';\nimport isString from 'crocks/predicates/isString';\nimport propPathOr from 'crocks/helpers/propPathOr';\nimport compose from 'crocks/helpers/compose';\nimport map from 'crocks/pointfree/map';\nimport chain from 'crocks/pointfree/chain';\nimport safeLift from 'crocks/Maybe/safeLift';\nimport liftA2 from 'crocks/helpers/liftA2';\n\nimport { fetchPipelines } from '../../actions/pipelines';\nimport { getPipelines, getLoadingState } from '../../reducers/pipelines';\n\n// const goBack = history => history.goBack;\n\nfunction Project({ pipelines, loading, actions, match, history }) {\n  useEffect(() => {\n    if(!loading) {\n      compose(\n        map(actions.fetchPipelines),\n        chain(safe(isNumber)),\n        map(parseInt),\n        propPath(['params', 'projectId'])\n      )(match)\n    }\n  }, []);\n  return (\n    <>\n      <Link to={'/'}>Projects</Link>\n      <h2>Project</h2>\n      {pipelines.map(item => (\n        <div key={item.id}>\n          <h3>{`#${item.id}`}</h3>\n          <div></div>\n        </div>\n      ))}\n    </>\n  );\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n    pipelines: getPipelines(state),\n    loading: getLoadingState(state),\n\t};\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return { \n    actions: bindActionCreators({ fetchPipelines }, dispatch),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);","import React, { useEffect, Component, lazy, Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\nimport { bindActionCreators } from 'redux';\nimport {connect} from \"react-redux\";\nimport Login from '../Login';\nimport { hashFunction } from '../../utils';\nimport { login, logout } from '../../actions/auth';\nimport Projects from '../Projects';\nimport Project from '../Project';\n// const Projects = lazy(() => import('../Projects'));\n// const Project = lazy(() => import('../Project'));\n\nfunction Layout({ stateHash, auth, actions }) {\n  const urlParams = new URLSearchParams(window.location.hash);\n  const accessToken = urlParams.get(\"#access_token\");\n  const stateHashParam = urlParams.get(\"state\");\n\n  useEffect(() => {\n    if(!auth.isAuthenticated && accessToken && stateHashParam === stateHash) {\n      actions.login(accessToken);\n    }\n  }, []);\n\n  // console.log(Projects);\n  \n  return (\n    <>\n      {!auth.isAuthenticated ? (\n        <Login hash={stateHash}/>\n      ) : (\n        <Router>\n          <div>\n            <button onClick={actions.logout}>Logout</button>\n            {/* <Suspense fallback={<div>Loading...</div>}> */}\n              <Switch>\n                <Route exact path=\"/\" component={Projects} />\n                <Route path=\"/project/:projectId\" component={Project} />\n              </Switch>\n            {/* </Suspense> */}\n          </div>\n        </Router>\n      )}\n    </>\n  );\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n    // stateHash: hashFunction(state),\n    stateHash: \"hello\",\n    auth: state.auth,\n\t};\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return { \n    actions: bindActionCreators({ login, logout }, dispatch),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n","import compose from 'crocks/helpers/compose';\n\nconst handleResponse = (raw) =>\n  raw\n  .then(function(response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    return response;\n  })\n  .then(r => r.json())\n\n// const splitParams = ({ token, ...rest}) => \n\nconst log = (props) => {\n  console.log(props);\n  return props;\n}\n\nconst getRequest = ({ url, token, ...rest}) => \n  fetch( \n    url, \n    {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          // \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n        // body: JSON.stringify(rest),\n    }\n  )\n\nexport const fetchUser = compose(\n    handleResponse,\n    getRequest,\n    (props) => ({ url: `https://gitlab.com/api/v4/user`, ...props})\n  )\n\nexport const fetchProjects = compose(\n    log,\n    handleResponse,\n    getRequest,\n    ({ userId, ...rest }) => ({ url: `https://gitlab.com/api/v4/users/${userId}/projects`, ...rest})\n  )\n\nexport const fetchPipelines = compose(\n    handleResponse,\n    getRequest,\n    ({ projectId, ...rest }) => ({ url: `https://gitlab.com/api/v4/projects/${projectId}/pipelines`, ...rest})\n  )\n\nexport const fetchPipeline = compose(\n    handleResponse,\n    getRequest,\n    ({ projectId, pipelineId, ...rest }) => ({ url: `https://gitlab.com/api/v4/projects/${projectId}/pipelines/${pipelineId}`, ...rest})\n  )\n\nexport const fetchPipelineJobs = compose(\n    handleResponse,\n    getRequest,\n    ({ projectId, ...rest }) => ({ url: `https://gitlab.com/api/v4/projects/:id/pipelines/:pipeline_id/jobs`, ...rest})\n  )","import { of, from } from 'rxjs';\nimport {\n  filter,\n  map,\n  concat,\n  switchMap,\n  catchError,\n  tap,\n} from 'rxjs/operators';\nimport { saveState } from '../localStorage';\nimport * as userActions from '../actions/auth';\nimport { fetchProjects } from '../actions/projects';\nimport * as api from '../api';\n\nconst save = (value) => {\n  try {\n    saveState(value);\n  } catch {\n    return {\n      type: 'NOT_SAVED'\n    }\n  }\n  return {\n    type: 'SAVED'\n  }\n}\n\nexport const login = (action$, state) => \n{\n  return action$.pipe(\n    filter((a: Action) =>\n      a.type === 'LOGIN_REQUESTED'),\n    switchMap(a => {\n      return from(api.fetchUser({\n        token: a.token\n      })).pipe(\n        switchMap(user => {\n          return of(userActions.userSuccess(user)).pipe(concat(\n            of(save({\n                auth: state.value.auth,\n                user,\n            })),\n            of(userActions.loginSuccess(a.token)),\n            of(fetchProjects()),\n          ))\n        }),\n        catchError(e => of(userActions.userFail(e.message)))\n      );\n    })\n  )\n}\n\nexport const logout = (action$, state) => \n{\n  return action$.pipe(\n    filter((a: Action) =>\n      a.type === 'LOGOUT'),\n    map(a => save({\n      auth: state.value.auth,\n      user: {}\n    }))\n  )\n}","export const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n        return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\n\nexport const saveState = (state) => {\n  const serializedState = JSON.stringify(state);\n  localStorage.setItem('state', serializedState);\n};","import { combineEpics } from 'redux-observable';\nimport { login, logout } from './auth';\nimport { loadProjects } from './projects';\nimport { loadPipelines, loadPipeline } from './pipelines';\n\nexport default combineEpics(\n    login, logout,\n    loadProjects,\n    loadPipelines,\n    loadPipeline,\n);","import { from, of } from 'rxjs';\nimport {\n  switchMap,\n  map,\n  filter,\n  catchError,\n  takeUntil,\n} from 'rxjs/operators';\n\nimport * as projectsActions from '../actions/projects';\nimport * as api from '../api';\n\nexport const loadProjects = (action, state) =>\n  action.ofType('FETCH_PROJECTS').pipe(\n    switchMap(() => {\n      const requestAction = from(api.fetchProjects({\n        token: state.value.auth.token,\n        userId: state.value.user.id,\n      })).pipe(\n        map(data => projectsActions.projectsSuccess(data)),\n        catchError(e => of(projectsActions.projectsFail(e.message)))\n      );\n      \n      return requestAction;\n        // .takeUntil(action\n        //   .filter(futureAction => futureAction.type === 'FETCH_PROJECTS'));\n    })\n  );","import { from, of } from 'rxjs';\nimport {\n  switchMap,\n  map,\n  filter,\n  catchError,\n  takeUntil,\n  concat,\n} from 'rxjs/operators';\n\nimport * as pipelinesActions from '../actions/pipelines';\n// import asObservable from './rxUtils';\nimport * as api from '../api';\n\nexport const loadPipelines = (action$, state) =>\n  action$.ofType('FETCH_PIPELINES').pipe(\n    switchMap((a) => {\n      const requestAction = from(api.fetchPipelines({\n        token: state.value.auth.token,\n        projectId: a.projectId,\n      })).pipe(\n        switchMap(data => \n          of(pipelinesActions.pipelinesSuccess(data))\n          .pipe(\n            concat(\n              ...data.map(pipeline => of({ \n                type: 'FETCH_PIPELINE',  \n                pipelineId: pipeline.id,\n                projectId: a.projectId,\n              }))\n            )\n          )\n        ),\n        // map(data => pipelinesActions.pipelinesSuccess(data)),\n        catchError(e => of(pipelinesActions.pipelinesFail(e.message)))\n      );\n      return requestAction;\n        // .takeUntil(action\n        //   .filter(futureAction => futureAction.type === 'FETCH_PIPELINES'));\n    })\n  );\n\nexport const loadPipeline = (action$, state) =>\n  action$.ofType('FETCH_PIPELINE').pipe(\n    switchMap((a) => {\n      const requestAction = from(api.fetchPipeline({\n        token: state.value.auth.token,\n        pipelineId: a.pipelineId,\n        projectId: a.projectId,\n      })).pipe(\n        map(data => pipelinesActions.pipelineSuccess(data)),\n        catchError(e => of(pipelinesActions.pipelineFail(e.message)))\n      );\n      return requestAction;\n        // .takeUntil(action\n        //   .filter(futureAction => futureAction.type === 'FETCH_PIPELINES'));\n    })\n  );","const initialState = {\n    isAuthenticated: false,\n    token: null,\n}\n\nconst auth = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOGIN_SUCCESS':\n            return {\n                isAuthenticated: true,\n                token: action.token,\n            }\n        case 'LOGOUT':\n            return initialState;\n        default:\n            return state;\n    }\n};\n\nexport default auth;\n  ","const initialState = {\n  list: [],\n  loading: false,\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n      case 'FETCH_PROJECTS':\n        return {\n          ...state,\n          loading: true,\n        };\n      case 'FETCH_PROJECTS_SUCCESS':\n        return {\n          loading: false,\n          list: [\n            ...state.list,\n            ...action.response,\n          ]\n        }\n      case 'FETCH_PROJECTS_FAIL':\n        return {\n          ...state,\n          loading: false,\n        };\n      default:\n        return state;\n    }\n  };\n  ","import { combineReducers } from 'redux';\nimport auth from './auth';\nimport pipelines from './pipelines';\nimport projects from './projects';\nimport user from './user';\n\nexport default combineReducers({\n    auth,\n    projects,\n    pipelines,\n    user,\n});","export default (state = {}, action) => {\n    switch (action.type) {\n      case 'FETCH_USER_SUCCESS':\n        return {\n          ...state,\n          ...action.response,\n        };\n      case 'FETCH_USER_FAIL':\n        return state;\n      default:\n        return state;\n    }\n  };","/* @flow */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { loadState, saveState } from './localStorage';\n\nimport rootEpic from './epics/';\nimport appReducer from './reducers';\n\nconst persistedState = loadState();\n\nexport default () => {\n  const epicMiddleware = createEpicMiddleware();\n\n  const middleWares = [\n    epicMiddleware,\n  ];\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  /* eslint-enable */\n\n  const store = createStore(appReducer, persistedState, composeEnhancers(\n    applyMiddleware(...middleWares)\n  ));\n\n  // store.subscribe(() => {\n  //   saveState({\n  //     auth: store.getState().auth,\n  //   });\n  // });\n    \n  epicMiddleware.run(rootEpic);\n\n  return store;\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Layout from './components/Layout/index';\nimport configureStore from './configureStore';\n\nconst store = configureStore();\n\nconst App = () => (\n  <Provider store={store}>\n    <Layout />\n  </Provider>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}