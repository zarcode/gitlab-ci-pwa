{"version":3,"sources":["data/localStorage.js","components/Login/index.js","utils/index.js","data/models/auth.js","data/reducers/auth.js","components/Layout/index.js","data/api/index.js","data/models/user.js","data/reducers/user.js","data/epics/auth.js","data/epics/index.js","data/epics/projects.js","data/epics/pipelines.js","data/reducers/index.js","data/configureStore.js","App.js","serviceWorker.js","index.js","data/helpers.js","data/models/projects.js","data/reducers/projects.js","data/schema.js","data/models/pipelines.js","data/reducers/pipelines.js"],"names":["saveAny","key","state","serializedState","JSON","stringify","localStorage","setItem","err","console","log","loadAny","getItem","parse","require","clientId","domain","root","loginRedirect","hash","url","window","location","href","Login","_ref2","loginURL","concat","react_default","a","createElement","onClick","hashFunction","object","h32","toString","modify","State","lnsIsAuthenticated","lensPath","lnsToken","initialState","isAuthenticated","token","undefined","login","createAction","loginSuccess","logout","reducer","createReducer","_createReducer","Object","defineProperty","compose","set","Projects","lazy","__webpack_require__","e","then","bind","Project","NoMatch","connect","dispatch","actions","bindActionCreators","auth","urlParams","URLSearchParams","accessToken","get","stateHashParam","_useState","useState","_useState2","slicedToArray","stateHash","setStateHash","useEffect","Fragment","BrowserRouter","react","fallback","Switch","Route","exact","path","component","components_Login","handleResponse","raw","response","ok","Error","statusText","r","json","getRequest","_ref","objectWithoutProperties","fetch","headers","Authorization","fetchUser","props","objectSpread","fetchProjects","userId","rest","fetchPipelines","_ref3","projectId","fetchPipeline","_ref4","pipelineId","_ref5","userSuccess","userFail","user","assoc","save","value","_unused","type","combineEpics","action$","pipe","filter","switchMap","from","api","payload","of","userActions","authActions","catchError","message","map","action","ofType","id","data","page","pipelines","lastLoadedPage","projectsActions","pipelinesActions","apply","toConsumableArray","pipeline","mergeMap","initialPipelines","projects","initialProjects","initialAuth","reducers","combineReducers","prevState","execWith","option","persistedState","store","epicMiddleware","createEpicMiddleware","middleWares","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","appReducer","applyMiddleware","run","rootEpic","configureStore","App","es","components_Layout","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","crocks_First__WEBPACK_IMPORTED_MODULE_0__","crocks_First__WEBPACK_IMPORTED_MODULE_0___default","n","crocks_State__WEBPACK_IMPORTED_MODULE_1__","crocks_State__WEBPACK_IMPORTED_MODULE_1___default","ramda_src_lensPath__WEBPACK_IMPORTED_MODULE_2__","ramda_src_lensPath__WEBPACK_IMPORTED_MODULE_2___default","ramda_src_lensProp__WEBPACK_IMPORTED_MODULE_3__","ramda_src_lensProp__WEBPACK_IMPORTED_MODULE_3___default","ramda_src_over__WEBPACK_IMPORTED_MODULE_4__","ramda_src_over__WEBPACK_IMPORTED_MODULE_4___default","ramda_src_set__WEBPACK_IMPORTED_MODULE_5__","ramda_src_set__WEBPACK_IMPORTED_MODULE_5___default","crocks_combinators_applyTo__WEBPACK_IMPORTED_MODULE_6__","crocks_combinators_applyTo__WEBPACK_IMPORTED_MODULE_6___default","crocks_combinators_flip__WEBPACK_IMPORTED_MODULE_7__","crocks_combinators_flip__WEBPACK_IMPORTED_MODULE_7___default","crocks_predicates_isSameType__WEBPACK_IMPORTED_MODULE_8__","crocks_predicates_isSameType__WEBPACK_IMPORTED_MODULE_8___default","crocks_helpers_mreduceMap__WEBPACK_IMPORTED_MODULE_9__","crocks_helpers_mreduceMap__WEBPACK_IMPORTED_MODULE_9___default","crocks_Maybe_prop__WEBPACK_IMPORTED_MODULE_10__","crocks_Maybe_prop__WEBPACK_IMPORTED_MODULE_10___default","crocks_Maybe_safe__WEBPACK_IMPORTED_MODULE_11__","crocks_Maybe_safe__WEBPACK_IMPORTED_MODULE_11___default","flip","mreduceMap","First","applyTo","strats","prop","chain","safe","isSameType","lnsLoading","lnsLastLoadedPage","lnsError","lnsList","list","loading","error","projectsSuccess","projectsFail","constant","over","schema","Entity","lnsIds","lnsById","byId","ids","pipelinesSuccess","lensProp","normalize","pipelinesFail","pipelineSuccess","pipelineFail","assign","entities","result","getLoadingState","getLastLoadedPage","getPipelines","createSelector","allIds","allById"],"mappings":"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","file":"static/js/main.b82f4ebc.chunk.js","sourcesContent":["export const saveAny = (key, state) => {\n  const serializedState = JSON.stringify(state);\n  try {\n    localStorage.setItem(key, serializedState);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const loadAny = (key) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (!serializedState) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => saveAny('state', state);\n\nexport const loadState = () => loadAny('state');\n","import React from 'react';\nimport { saveAny } from '../../data/localStorage';\n\nlet { clientId, domain, root } =\n  process.env.NODE_ENV === 'production' ?\n    require('../../config.prod.json') : require('../../config.dev.json');\n\nconst loginRedirect = (hash, url) => () => {\n  saveAny('stateHash', hash);\n  window.location.href = url;\n}\n\nfunction Login({ hash }) {\n  const loginURL = `https://gitlab.com/oauth/authorize?client_id=${clientId}&redirect_uri=${domain}${root}` +\n    `&response_type=token&state=${hash}`;\n    \n  return (\n    <nav>\n      <ul>\n        <li>\n          {/* <a href={loginURL}>Login</a> */}\n          <button onClick={loginRedirect(hash, loginURL)}>Login</button>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Login;","import {h32} from \"xxhashjs\";\n\nexport const hashFunction = object => {\n\treturn h32(\n\t\ttypeof object === \"string\" ? object : JSON.stringify(object),\n\t\t0xabcd\n\t).toString(16);\n};","import State from 'crocks/State'\n\nimport compose from 'crocks/helpers/compose'\n\nimport { lensPath, set } from '../helpers'\n\nconst { modify } = State\nconst parent = 'auth'\n\n// lnsLoading :: Object -> Lens\nconst lnsIsAuthenticated =\n  lensPath([ parent, 'isAuthenticated' ])\n\n// lnsError :: Object -> Lens\nconst lnsToken =\n  lensPath([ parent, 'token' ])\n\n// saveToken :: () -> State AppState ()\nexport const saveToken = (token) => \n    modify(\n        compose(\n            set(lnsIsAuthenticated, true),\n            set(lnsToken, token)\n        )\n    )\n\n// resetState :: a -> State AppState ()\nexport const resetState = () => \n    modify(\n        compose(\n            set(lnsIsAuthenticated, false),\n            set(lnsToken, undefined)\n        )\n    )","import { createAction, createReducer } from '../helpers'\nimport { saveToken, resetState } from '../models/auth'\n\nexport const initialState = {\n    isAuthenticated: false,\n    token: undefined,\n}\n\nconst LOGIN_REQUESTED = 'LOGIN_REQUESTED'\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nconst LOGOUT = 'LOGOUT'\n\nexport const login =\n  createAction(LOGIN_REQUESTED)\n\nexport const loginSuccess =\n  createAction(LOGIN_SUCCESS)\n\nexport const logout =\n  createAction(LOGOUT)\n\nconst reducer = createReducer({\n  [LOGIN_SUCCESS]: saveToken,\n  [LOGOUT]: resetState\n})\n\nexport default reducer\n  ","import React, { useEffect, useState, Component, lazy, Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\nimport { bindActionCreators } from 'redux';\nimport {connect} from \"react-redux\";\nimport Login from '../Login';\nimport { hashFunction } from '../../utils';\nimport { login, logout } from '../../data/reducers/auth';\nimport { loadAny } from '../../data/localStorage';\nlet { root } = \n  process.env.NODE_ENV === 'production' ? \n  require('../../config.prod.json') : require('../../config.dev.json');\n// import Project from '../Project';\nconst Projects = lazy(() => import('../Projects'));\nconst Project = lazy(() => import('../Project'));\nconst NoMatch = lazy(() => import('../NoMatch'));\n\nfunction Layout({ state, actions }) {\n  const { auth } = state;\n  const urlParams = new URLSearchParams(window.location.hash);\n  const accessToken = urlParams.get(\"#access_token\");\n  const stateHashParam = urlParams.get(\"state\");\n  const [stateHash, setStateHash] = useState();\n  \n  // const stateHash = hashFunction(state);\n  \n  useEffect(() => {\n    if(!auth.isAuthenticated && accessToken && stateHashParam === loadAny('stateHash')) {\n      actions.login(accessToken);\n    }\n\n    if(!auth.isAuthenticated && !stateHashParam) {\n      setStateHash(hashFunction(state));\n    }\n  }, []);\n  \n  return (\n    <>\n      {!auth.isAuthenticated ? (\n        <Login hash={stateHash}/>\n      ) : (\n        <>\n          <nav>\n            <button onClick={actions.logout}>Logout</button>\n          </nav>\n          <main>\n            <Router>\n              <Suspense fallback={<div>Loading...</div>}>\n                <Switch>\n                  <Route exact path={`${root}/`} component={Projects} />\n                  <Route path={`/project/:projectId`} component={Project} />\n                  <Route component={NoMatch} />\n                </Switch>\n              </Suspense>\n            </Router>\n          </main>\n        </>\n      )}\n    </>\n  );\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n    state,\n\t};\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return { \n    actions: bindActionCreators({ login, logout }, dispatch),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n","import compose from 'crocks/helpers/compose';\n\nconst handleResponse = (raw) =>\n  raw\n  .then(function(response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    return response;\n  })\n  .then(r => r.json())\n\nconst log = (props) => {\n  console.log(props);\n  return props;\n}\n\nconst getRequest = ({ url, token, ...rest}) => \n  fetch( \n    url, \n    {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          // \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n        // body: JSON.stringify(rest),\n    }\n  )\n\nexport const fetchUser = compose(\n    handleResponse,\n    getRequest,\n    (props) => ({ \n      url: `https://gitlab.com/api/v4/user`, \n      ...props\n    })\n  )\n\nexport const fetchProjects = compose(\n    // log,\n    handleResponse,\n    getRequest,\n    ({ userId, ...rest }) => ({ \n      url: `https://gitlab.com/api/v4/users/${userId}/projects`, \n      ...rest\n    })\n  )\n\nexport const fetchPipelines = compose(\n    handleResponse,\n    getRequest,\n    ({ projectId, ...rest }) => ({ \n      url: `https://gitlab.com/api/v4/projects/${projectId}/pipelines`, \n      ...rest\n    })\n  )\n\nexport const fetchPipeline = compose(\n    handleResponse,\n    getRequest,\n    ({ projectId, pipelineId, ...rest }) => ({ \n      url: `https://gitlab.com/api/v4/projects/${projectId}/pipelines/${pipelineId}`, \n      ...rest\n    })\n  )\n\nexport const fetchPipelineJobs = compose(\n    handleResponse,\n    getRequest,\n    ({ projectId, ...rest }) => ({ \n      url: `https://gitlab.com/api/v4/projects/:id/pipelines/:pipeline_id/jobs`, \n      ...rest\n    })\n  )","import State from 'crocks/State'\n\nimport assoc from 'crocks/helpers/assoc'\n\nconst { modify } = State\n\n// addUser :: Object -> State AppState Object\nexport const addUser = (user) => \n    modify(assoc('user', user))\n\n    ","import { createAction, createReducer } from '../helpers'\nimport { addUser } from '../models/user'\n\nexport const initialState = {}\n\nconst FETCH_USER = 'FETCH_USER'\nconst FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS'\nconst FETCH_USER_FAIL = 'FETCH_USER_FAIL'\n\nexport const fetchUser =\n  createAction(FETCH_USER)\n\nexport const userSuccess =\n  createAction(FETCH_USER_SUCCESS)\n\nexport const userFail =\n  createAction(FETCH_USER_FAIL)\n\nconst reducer = createReducer({\n  [FETCH_USER_SUCCESS]: addUser,\n  // [FETCH_USER_FAIL]: logError\n})\n\nexport default reducer","import { of, from } from 'rxjs';\nimport {\n  filter,\n  map,\n  concat,\n  switchMap,\n  catchError,\n  // tap,\n} from 'rxjs/operators';\n\nimport * as api from '../api';\nimport { saveState } from '../localStorage';\n\nimport * as authActions from '../reducers/auth';\nimport * as userActions from '../reducers/user';\nimport { fetchProjects } from '../reducers/projects';\n\nconst save = (value) => {\n  try {\n    saveState(value);\n  } catch {\n    return {\n      type: 'NOT_SAVED'\n    }\n  }\n  return {\n    type: 'SAVED'\n  }\n}\n\nexport const login = (action$, state) => \n{\n  return action$.pipe(\n    filter((a: Action) =>\n      a.type === 'LOGIN_REQUESTED'),\n    switchMap(a => {\n      return from(api.fetchUser({\n        token: a.payload\n      })).pipe(\n        switchMap(user => {\n          return of(userActions.userSuccess(user)).pipe(concat(\n            of(save({\n                auth: {\n                  isAuthenticated: true,\n                  token: a.payload,\n                },\n                user,\n            })),\n            of(authActions.loginSuccess(a.payload)),\n            of(fetchProjects()),\n          ))\n        }),\n        catchError(e => of(userActions.userFail(e.message)))\n      );\n    })\n  )\n}\n\nexport const logout = (action$, state) => \n{\n  return action$.pipe(\n    filter((a: Action) =>\n      a.type === 'LOGOUT'),\n    map(a => save({\n      auth: state.value.auth,\n      user: {},\n    }))\n  )\n}","import { combineEpics } from 'redux-observable';\n\nimport { login, logout } from './auth';\nimport { loadProjects } from './projects';\nimport { loadPipelines, loadPipeline } from './pipelines';\n\nexport default combineEpics(\n    login, logout,\n    loadProjects,\n    loadPipelines,\n    loadPipeline,\n);","import { from, of } from 'rxjs';\nimport {\n  switchMap,\n  map,\n  catchError,\n} from 'rxjs/operators';\n\nimport * as api from '../api';\nimport * as projectsActions from '../reducers/projects';\n\nexport const loadProjects = (action, state) =>\n  action.ofType('FETCH_PROJECTS').pipe(\n    switchMap(() => {\n      const requestAction = from(api.fetchProjects({\n        token: state.value.auth.token,\n        userId: state.value.user.id,\n      })).pipe(\n        map(data => { \n          const page = state.value.pipelines.lastLoadedPage + 1;\n          return projectsActions.projectsSuccess({ data, page })\n        }),\n        catchError(e => of(projectsActions.projectsFail(e.message)))\n      );\n      \n      return requestAction;\n        // .takeUntil(action\n        //   .filter(futureAction => futureAction.type === 'FETCH_PROJECTS'));\n    })\n  );","import { from, of } from 'rxjs';\nimport {\n  switchMap,\n  mergeMap,\n  map,\n  catchError,\n  concat,\n} from 'rxjs/operators';\n\nimport * as api from '../api';\nimport * as pipelinesActions from '../reducers/pipelines';\n\nexport const loadPipelines = (action$, state) =>\n  action$.ofType('FETCH_PIPELINES').pipe(\n    switchMap((a) => {\n      const requestAction = from(api.fetchPipelines({\n        token: state.value.auth.token,\n        projectId: a.projectId,\n      })).pipe(\n        switchMap(data => {\n          const page = state.value.pipelines.lastLoadedPage + 1;\n          return of(pipelinesActions.pipelinesSuccess({ data, page }))\n          .pipe(\n            concat(\n              ...data.map(pipeline => of({ \n                type: 'FETCH_PIPELINE',  \n                pipelineId: pipeline.id,\n                projectId: a.projectId,\n              }))\n            )\n          )\n        }),\n        // map(data => pipelinesActions.pipelinesSuccess(data)),\n        catchError(e => of(pipelinesActions.pipelinesFail(e.message)))\n      );\n      return requestAction;\n        // .takeUntil(action\n        //   .filter(futureAction => futureAction.type === 'FETCH_PIPELINES'));\n    })\n  );\n\nexport const loadPipeline = (action$, state) =>\n  action$.ofType('FETCH_PIPELINE').pipe(\n    mergeMap((a) => {\n      const requestAction = from(api.fetchPipeline({\n        token: state.value.auth.token,\n        pipelineId: a.pipelineId,\n        projectId: a.projectId,\n      })).pipe(\n        map(data => pipelinesActions.pipelineSuccess(data)),\n        catchError(e => of(pipelinesActions.pipelineFail(e.message)))\n      );\n      return requestAction;\n    })\n  );","import execWith from 'crocks/State/execWith'\n\nimport auth, { initialState as initialAuth } from './auth';\nimport pipelines, { initialState as initialPipelines } from './pipelines';\nimport projects, { initialState as initialProjects } from './projects';\nimport user, { initialState as initialUser } from './user';\n\nimport { combineReducers } from '../helpers'\n\nexport const initialState = {\n    pipelines: initialPipelines,\n    projects: initialProjects,\n    auth: initialAuth,\n    user: initialUser,\n}\n// Action a :: { type: String, payload: a }\n// Reducer :: Action a -> Maybe (State AppState ())\n\n// reducers :: Reducer\nconst reducers = combineReducers([\n    auth,\n    projects,\n    user,\n    pipelines,\n]);\n\n// reducer :: (AppState, Action) -> AppState\nconst reducer = (prevState, action) =>\n  reducers(action)\n    .map(execWith(prevState))\n    .option(prevState)\n\nexport default reducer","import { createStore, applyMiddleware, compose } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { loadState } from './localStorage';\n\nimport rootEpic from './epics/';\nimport appReducer, { initialState } from './reducers';\n\nconst persistedState = loadState();\n\nconst data = {\n  ...initialState,\n  ...persistedState,\n}\n\nexport default () => {\n  const epicMiddleware = createEpicMiddleware();\n\n  const middleWares = [\n    epicMiddleware,\n  ];\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  /* eslint-enable */\n\n  const store = createStore(appReducer, data, composeEnhancers(\n    applyMiddleware(...middleWares)\n  ));\n\n  // store.subscribe(() => {\n  //   saveState({\n  //     auth: store.getState().auth,\n  //   });\n  // });\n    \n  epicMiddleware.run(rootEpic);\n\n  return store;\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Layout from './components/Layout/index';\nimport configureStore from './data/configureStore';\n\nconst store = configureStore();\n\nconst App = () => (\n  <>\n    <header>\n      <h1>Gitlab CI App</h1>\n    </header>\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  </>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import First from 'crocks/First'\nimport State from 'crocks/State'\n\n//ramda imports\nimport lensPath from 'ramda/src/lensPath'\nimport lensProp from 'ramda/src/lensProp'\nimport assocPath from 'ramda/src/assocPath'\nimport over from 'ramda/src/over'\nimport set from 'ramda/src/set'\n\nimport applyTo from 'crocks/combinators/applyTo'\nimport flip from 'crocks/combinators/flip'\nimport isSameType from 'crocks/predicates/isSameType'\n// import merge from 'crocks/pointfree'\nimport mreduceMap from 'crocks/helpers/mreduceMap'\nimport prop from 'crocks/Maybe/prop'\nimport safe from 'crocks/Maybe/safe'\n\nexport {\n  assocPath, lensPath, over, set, lensProp,\n}\n\n// combineReducers :: [ Reducer ] -> Reducer\nexport const combineReducers = flip(action =>\n  mreduceMap(First, applyTo(action))\n)\n\n// createAction :: String -> a -> Action a\nexport const createAction =\n  type => payload => ({ type, payload })\n\n// createReducer :: Object -> Reducer\nexport const createReducer =\n  strats => ({ type, payload }) =>\n    prop(type, strats)\n      .map(applyTo(payload))\n      .chain(safe(isSameType(State)))","import State from 'crocks/State'\n\nimport compose from 'crocks/helpers/compose'\nimport concat from 'crocks/pointfree/concat'\nimport constant from 'crocks/combinators/constant'\n\nimport { lensPath, over, set } from '../helpers'\n\nconst { modify } = State\nconst parent = 'projects'\n\n// lnsLoading :: Object -> Lens\nconst lnsLoading =\n  lensPath([ parent, 'loading' ])\n\n// lnsLastLoadedPage :: Object -> Lens\nconst lnsLastLoadedPage =\nlensPath([ parent, 'lastLoadedPage' ])\n\n// lnsError :: Object -> Lens\nconst lnsError =\n  lensPath([ parent, 'error' ])\n\n// lnsList :: Object -> Lens\nconst lnsList =\n  lensPath([ parent, 'list' ])\n\n// startLoading :: () -> State AppState ()\nexport const startLoading = () => \n    modify(set(lnsLoading, constant(true)))\n\n// logError :: a -> State AppState ()\nexport const logError = (payload) => \n    modify(\n        compose(\n            set(lnsLoading, false),\n            set(lnsError, payload)\n        )\n    )\n\n// addToList :: [a] -> State AppState ()\nexport const addToList = ({ data, page }) => \n    modify(\n        compose(\n            set(lnsLoading, false),\n            set(lnsLastLoadedPage, page),\n            over(lnsList, concat(data))\n        )\n    )\n\n    ","\nimport { createAction, createReducer } from '../helpers'\nimport { addToList, logError, startLoading } from '../models/projects'\n\nexport const initialState = {\n  list: [],\n  loading: false,\n  lastLoadedPage: 0,\n  error: undefined,\n}\n\nconst FETCH_PROJECTS = 'FETCH_PROJECTS'\nconst FETCH_PROJECTS_SUCCESS = 'FETCH_PROJECTS_SUCCESS'\nconst FETCH_PROJECTS_FAIL = 'FETCH_PROJECTS_FAIL'\n\nexport const fetchProjects =\n  createAction(FETCH_PROJECTS)\n\nexport const projectsSuccess =\n  createAction(FETCH_PROJECTS_SUCCESS)\n\nexport const projectsFail =\n  createAction(FETCH_PROJECTS_FAIL)\n\nconst reducer = createReducer({\n  [FETCH_PROJECTS]: startLoading,\n  [FETCH_PROJECTS_SUCCESS]: addToList,\n  [FETCH_PROJECTS_FAIL]: logError\n})\n\nexport default reducer\n  \n\n  ","import { schema } from 'normalizr';\n\nexport const pipeline = new schema.Entity('pipeline');\n\nexport const pipelines = [pipeline];","import State from 'crocks/State'\n\nimport assign from 'crocks/helpers/assign'\nimport compose from 'crocks/helpers/compose'\nimport concat from 'crocks/pointfree/concat'\n\nimport { lensPath, over, set, assocPath } from '../helpers'\n\nconst { modify } = State\nconst parent = 'pipelines'\n\n// lnsLoading :: Object -> Lens\nconst lnsLoading =\n  lensPath([ parent, 'loading' ])\n\n// lnsError :: Object -> Lens\nconst lnsError =\n  lensPath([ parent, 'error' ])\n\n// lnsLastLoadedPage :: Object -> Lens\nconst lnsLastLoadedPage =\n  lensPath([ parent, 'lastLoadedPage' ])\n\n// lnsIds :: Object -> Lens\nconst lnsIds =\n  lensPath([ parent, 'ids' ])\n\n// lnsById :: Object -> Lens\nconst lnsById =\n  lensPath([ parent, 'byId' ])\n\n// lnsById :: Object -> Lens\nconst lnsPipelineById = id =>\n  lensPath([ parent, 'byId', id ])\n\n// startLoading :: () -> State AppState ()\nexport const startLoading = () => \n    modify(set(lnsLoading, true))\n\n// saveResults :: Object -> State AppState ()\nexport const saveResults = ({ data, page }) => \n    modify(\n        compose(\n            // todo: use set instead over\n            set(lnsLoading, false),\n            set(lnsLastLoadedPage, page),\n            over(lnsById, assign(data.entities.pipeline)),\n            over(lnsIds, concat(data.result))\n        )\n    )\n\n// logError :: a -> State AppState ()\nexport const logError = (payload) => \n    modify(\n        compose(\n            set(lnsLoading, false),\n            set(lnsError, payload)\n        )\n    )\n\n// updatePipeline :: Object -> State AppState ()\nexport const updatePipeline = (payload) =>\n    modify(\n        set(\n            lnsPipelineById(payload.id),\n            payload\n        )\n    )\n\n// export const updatePipeline = (payload) =>\n//     modify(\n//         assocPath([ parent, 'byId', payload.id ], payload)\n//     )\n\n","import { normalize } from 'normalizr';\nimport { createSelector } from 'reselect';\nimport * as schema from '../schema';\n\nimport compose from 'crocks/helpers/compose';\nimport flip from 'crocks/combinators/flip';\n\nimport { createAction, createReducer, lensProp, over } from '../helpers';\nimport { logError, saveResults, startLoading, updatePipeline } from '../models/pipelines';\n\nexport const initialState = {\n  byId: {},\n  ids: [],\n  lastLoadedPage: 0,\n  loading: false,\n}\n\nconst FETCH_PIPELINES = 'FETCH_PIPELINES'\nconst FETCH_PIPELINES_SUCCESS = 'FETCH_PIPELINES_SUCCESS'\nconst FETCH_PIPELINES_FAIL = 'FETCH_PIPELINES_FAIL'\nconst FETCH_PIPELINE = 'FETCH_PIPELINE'\nconst FETCH_PIPELINE_SUCCESS = 'FETCH_PIPELINE_SUCCESS'\nconst FETCH_PIPELINE_FAIL = 'FETCH_PIPELINE_FAIL'\n\nexport const fetchPipelines = \n  createAction(FETCH_PIPELINES)\n\nexport const pipelinesSuccess =\n  compose(\n    createAction(FETCH_PIPELINES_SUCCESS),\n    over(lensProp('data'), flip(normalize)(schema.pipelines))\n  )\n\nexport const pipelinesFail =\n  createAction(FETCH_PIPELINES_FAIL)\n\nexport const fetchPipeline =\n  createAction(FETCH_PIPELINE)\n\nexport const pipelineSuccess =\n  createAction(FETCH_PIPELINE_SUCCESS)\n\nexport const pipelineFail =\n  createAction(FETCH_PIPELINE_FAIL)\n\nconst reducer = createReducer({\n  [FETCH_PIPELINES]: startLoading,\n  [FETCH_PIPELINES_SUCCESS]: saveResults,\n  [FETCH_PIPELINES_FAIL]: logError,\n  [FETCH_PIPELINE_SUCCESS]: updatePipeline,\n})\n\nexport default reducer;\n\nexport const getById = state => state.pipelines.byId;\nexport const getIds = state => state.pipelines.ids;\nexport const getLoadingState = state => state.pipelines.loading;\nexport const getLastLoadedPage = state => state.pipelines.lastLoadedPage;\nexport const getPipelines = createSelector([getIds, getById], (allIds, allById) =>\nallIds.map(id => allById[id]));\n  "],"sourceRoot":""}