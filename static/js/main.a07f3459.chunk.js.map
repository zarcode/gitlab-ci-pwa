{"version":3,"sources":["actions/projects.js","actions/schema.js","actions/pipelines.js","reducers/pipelines.js","components/Login/index.js","actions/auth.js","components/Layout/index.js","api/index.js","epics/auth.js","localStorage.js","epics/index.js","epics/projects.js","epics/pipelines.js","reducers/auth.js","reducers/projects.js","reducers/index.js","reducers/user.js","configureStore.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","fetchProjects","projectsSuccess","projectsFail","type","response","error","pipelines","schema","Entity","fetchPipelines","pipelines_pipelinesSuccess","pipelinesFail","pipelineSuccess","pipelineFail","projectId","pipelinesSuccess","normalize","initialState","byId","ids","loading","state","arguments","length","undefined","action","Object","_Users_zarkodencic_Documents_Projects_gitlab_ci_pwa_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","entities","pipeline","_Users_zarkodencic_Documents_Projects_gitlab_ci_pwa_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","concat","result","getLoadingState","getPipelines","createSelector","allIds","allById","map","id","require","clientId","siteUrl","Login","_ref2","hash","loginURL","react_default","a","createElement","href","login","token","logout","Projects","lazy","e","then","bind","Project","Promise","all","NoMatch","connect","stateHash","auth","dispatch","actions","bindActionCreators","_ref","urlParams","URLSearchParams","window","location","accessToken","get","stateHashParam","useEffect","isAuthenticated","Fragment","BrowserRouter","onClick","react","fallback","Switch","Route","exact","path","component","components_Login","handleResponse","raw","ok","Error","statusText","r","json","getRequest","url","objectWithoutProperties","fetch","headers","Authorization","fetchUser","compose","props","objectSpread","console","log","userId","rest","_ref3","fetchPipeline","_ref4","pipelineId","save","_ref5","value","serializedState","JSON","stringify","localStorage","setItem","err","saveState","_unused","combineEpics","action$","pipe","filter","switchMap","from","api","user","of","catchError","message","ofType","data","projectsActions","pipelinesActions","apply","toConsumableArray","list","combineReducers","projects","persistedState","getItem","parse","loadState","store","epicMiddleware","createEpicMiddleware","middleWares","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","appReducer","applyMiddleware","run","rootEpic","configureStore","App","es","components_Layout","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a07f3459.chunk.js","sourcesContent":["export const fetchProjects = () => ({\n  type: 'FETCH_PROJECTS',\n});\n\nexport const projectsSuccess = (response) => { \n  return ({\n    type: 'FETCH_PROJECTS_SUCCESS',\n    response,\n  });\n}\nexport const projectsFail = (error) => ({\n  type: 'FETCH_PROJECTS_FAIL',\n  error,\n});","import { schema } from 'normalizr';\n\nexport const pipeline = new schema.Entity('pipeline');\n\nexport const pipelines = [pipeline];","import { normalize } from 'normalizr';\nimport * as schema from './schema';\n\nexport const fetchPipelines = (projectId) => ({\n  type: 'FETCH_PIPELINES',\n  projectId,\n});\n\nexport const pipelinesSuccess = (response) => { \n  return ({\n    type: 'FETCH_PIPELINES_SUCCESS',\n    response: normalize(response, schema.pipelines),\n  });\n}\nexport const pipelinesFail = (error) => ({\n  type: 'FETCH_PIPELINES_FAIL',\n  error,\n});\n\nexport const fetchPipeline = (pipelineId) => ({\n  type: 'FETCH_PIPELINE',\n  pipelineId,\n});\n\nexport const pipelineSuccess = (response) => { \n  return ({\n    type: 'FETCH_PIPELINE_SUCCESS',\n    response\n  });\n}\nexport const pipelineFail = (error) => ({\n  type: 'FETCH_PIPELINE_FAIL',\n  error,\n});","import { createSelector } from 'reselect';\nconst initialState = {\n  byId: {},\n  ids: [],\n  loading: false,\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_PIPELINES':\n      return {\n        ...state,\n        loading: true,\n      }\n    case 'FETCH_PIPELINES_SUCCESS':\n      return {\n        byId: {\n          ...state.byId,\n          ...action.response.entities.pipeline,\n        },\n        ids: [\n          ...state.ids,\n          ...action.response.result,\n        ],\n        loading: false,\n      };\n    case 'FETCH_PIPELINES_FAIL':\n      return {\n        ...state,\n        loading: false,\n      }\n    default:\n      return state;\n  }\n};\n\nexport const getById = (state: any) => state.pipelines.byId;\nexport const getIds = (state: any) => state.pipelines.ids;\nexport const getLoadingState = (state: any) => state.pipelines.loading;\nexport const getPipelines = createSelector([getIds, getById], (allIds, allById) =>\nallIds.map(id => allById[id]));\n  ","import React from 'react';\n\nlet { clientId, siteUrl } = \n  process.env.NODE_ENV === 'production' ? \n  require('../../config.prod.json') : require('../../config.dev.json');\n\nfunction Login({ hash }) {\n    const loginURL = `https://gitlab.com/oauth/authorize?client_id=${clientId}&redirect_uri=${siteUrl}` + \n    `&response_type=token&state=${hash}`;\n    return (\n        <div>\n            <ul>\n                <li>\n                <a href={loginURL}>Login</a>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Login;","export const login = (token) => ({\n    type: 'LOGIN_REQUESTED',\n    token,\n});\n\nexport const loginSuccess = (token) => ({\n    type: 'LOGIN_SUCCESS',\n    token,\n});\n\nexport const logout = () => ({\n    type: 'LOGOUT',\n});\n\nexport const fetchUser = () => ({\n    type: 'FETCH_USER',\n  });\n\nexport const userSuccess = (response) => ({\n        type: 'FETCH_USER_SUCCESS',\n        response,\n    });\n\nexport const userFail = (error) => ({\n    type: 'FETCH_USER_FAIL',\n    error,\n});\n  ","import React, { useEffect, Component, lazy, Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\nimport { bindActionCreators } from 'redux';\nimport {connect} from \"react-redux\";\nimport Login from '../Login';\nimport { hashFunction } from '../../utils';\nimport { login, logout } from '../../actions/auth';\n// import Project from '../Project';\nconst Projects = lazy(() => import('../Projects'));\nconst Project = lazy(() => import('../Project'));\nconst NoMatch = lazy(() => import('../NoMatch'));\n\nfunction Layout({ stateHash, auth, actions }) {\n  const urlParams = new URLSearchParams(window.location.hash);\n  const accessToken = urlParams.get(\"#access_token\");\n  const stateHashParam = urlParams.get(\"state\");\n\n  useEffect(() => {\n    if(!auth.isAuthenticated && accessToken && stateHashParam === stateHash) {\n      actions.login(accessToken);\n    }\n  }, []);\n\n  // console.log(Projects);\n  \n  return (\n    <>\n      {!auth.isAuthenticated ? (\n        <Login hash={stateHash}/>\n      ) : (\n        <Router>\n          <div>\n            <button onClick={actions.logout}>Logout</button>\n            <Suspense fallback={<div>Loading...</div>}>\n              <Switch>\n                <Route exact path=\"/\" component={Projects} />\n                <Route path=\"/project/:projectId\" component={Project} />\n                <Route component={NoMatch} />\n              </Switch>\n            </Suspense>\n          </div>\n        </Router>\n      )}\n    </>\n  );\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n    // stateHash: hashFunction(state),\n    stateHash: \"hello\",\n    auth: state.auth,\n\t};\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return { \n    actions: bindActionCreators({ login, logout }, dispatch),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n","import compose from 'crocks/helpers/compose';\n\nconst handleResponse = (raw) =>\n  raw\n  .then(function(response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    return response;\n  })\n  .then(r => r.json())\n\n// const splitParams = ({ token, ...rest}) => \n\nconst log = (props) => {\n  console.log(props);\n  return props;\n}\n\nconst getRequest = ({ url, token, ...rest}) => \n  fetch( \n    url, \n    {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          // \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n        // body: JSON.stringify(rest),\n    }\n  )\n\nexport const fetchUser = compose(\n    handleResponse,\n    getRequest,\n    (props) => ({ url: `https://gitlab.com/api/v4/user`, ...props})\n  )\n\nexport const fetchProjects = compose(\n    log,\n    handleResponse,\n    getRequest,\n    ({ userId, ...rest }) => ({ url: `https://gitlab.com/api/v4/users/${userId}/projects`, ...rest})\n  )\n\nexport const fetchPipelines = compose(\n    handleResponse,\n    getRequest,\n    ({ projectId, ...rest }) => ({ url: `https://gitlab.com/api/v4/projects/${projectId}/pipelines`, ...rest})\n  )\n\nexport const fetchPipeline = compose(\n    handleResponse,\n    getRequest,\n    ({ projectId, pipelineId, ...rest }) => ({ url: `https://gitlab.com/api/v4/projects/${projectId}/pipelines/${pipelineId}`, ...rest})\n  )\n\nexport const fetchPipelineJobs = compose(\n    handleResponse,\n    getRequest,\n    ({ projectId, ...rest }) => ({ url: `https://gitlab.com/api/v4/projects/:id/pipelines/:pipeline_id/jobs`, ...rest})\n  )","import { of, from } from 'rxjs';\nimport {\n  filter,\n  map,\n  concat,\n  switchMap,\n  catchError,\n  tap,\n} from 'rxjs/operators';\nimport { saveState } from '../localStorage';\nimport * as userActions from '../actions/auth';\nimport { fetchProjects } from '../actions/projects';\nimport * as api from '../api';\n\nconst save = (value) => {\n  try {\n    saveState(value);\n  } catch {\n    return {\n      type: 'NOT_SAVED'\n    }\n  }\n  return {\n    type: 'SAVED'\n  }\n}\n\nexport const login = (action$, state) => \n{\n  return action$.pipe(\n    filter((a: Action) =>\n      a.type === 'LOGIN_REQUESTED'),\n    switchMap(a => {\n      return from(api.fetchUser({\n        token: a.token\n      })).pipe(\n        switchMap(user => {\n          return of(userActions.userSuccess(user)).pipe(concat(\n            of(save({\n                auth: {\n                  isAuthenticated: true,\n                  token: a.token,\n                },\n                user,\n            })),\n            of(userActions.loginSuccess(a.token)),\n            of(fetchProjects()),\n          ))\n        }),\n        catchError(e => of(userActions.userFail(e.message)))\n      );\n    })\n  )\n}\n\nexport const logout = (action$, state) => \n{\n  return action$.pipe(\n    filter((a: Action) =>\n      a.type === 'LOGOUT'),\n    map(a => save({\n      auth: state.value.auth,\n      user: {}\n    }))\n  )\n}","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  const serializedState = JSON.stringify(state);\n  try {\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    console.log(err);\n  }\n};","import { combineEpics } from 'redux-observable';\nimport { login, logout } from './auth';\nimport { loadProjects } from './projects';\nimport { loadPipelines, loadPipeline } from './pipelines';\n\nexport default combineEpics(\n    login, logout,\n    loadProjects,\n    loadPipelines,\n    loadPipeline,\n);","import { from, of } from 'rxjs';\nimport {\n  switchMap,\n  map,\n  filter,\n  catchError,\n  takeUntil,\n} from 'rxjs/operators';\n\nimport * as projectsActions from '../actions/projects';\nimport * as api from '../api';\n\nexport const loadProjects = (action, state) =>\n  action.ofType('FETCH_PROJECTS').pipe(\n    switchMap(() => {\n      const requestAction = from(api.fetchProjects({\n        token: state.value.auth.token,\n        userId: state.value.user.id,\n      })).pipe(\n        map(data => projectsActions.projectsSuccess(data)),\n        catchError(e => of(projectsActions.projectsFail(e.message)))\n      );\n      \n      return requestAction;\n        // .takeUntil(action\n        //   .filter(futureAction => futureAction.type === 'FETCH_PROJECTS'));\n    })\n  );","import { from, of } from 'rxjs';\nimport {\n  switchMap,\n  map,\n  filter,\n  catchError,\n  takeUntil,\n  concat,\n} from 'rxjs/operators';\n\nimport * as pipelinesActions from '../actions/pipelines';\n// import asObservable from './rxUtils';\nimport * as api from '../api';\n\nexport const loadPipelines = (action$, state) =>\n  action$.ofType('FETCH_PIPELINES').pipe(\n    switchMap((a) => {\n      const requestAction = from(api.fetchPipelines({\n        token: state.value.auth.token,\n        projectId: a.projectId,\n      })).pipe(\n        switchMap(data => \n          of(pipelinesActions.pipelinesSuccess(data))\n          .pipe(\n            concat(\n              ...data.map(pipeline => of({ \n                type: 'FETCH_PIPELINE',  \n                pipelineId: pipeline.id,\n                projectId: a.projectId,\n              }))\n            )\n          )\n        ),\n        // map(data => pipelinesActions.pipelinesSuccess(data)),\n        catchError(e => of(pipelinesActions.pipelinesFail(e.message)))\n      );\n      return requestAction;\n        // .takeUntil(action\n        //   .filter(futureAction => futureAction.type === 'FETCH_PIPELINES'));\n    })\n  );\n\nexport const loadPipeline = (action$, state) =>\n  action$.ofType('FETCH_PIPELINE').pipe(\n    switchMap((a) => {\n      const requestAction = from(api.fetchPipeline({\n        token: state.value.auth.token,\n        pipelineId: a.pipelineId,\n        projectId: a.projectId,\n      })).pipe(\n        map(data => pipelinesActions.pipelineSuccess(data)),\n        catchError(e => of(pipelinesActions.pipelineFail(e.message)))\n      );\n      return requestAction;\n        // .takeUntil(action\n        //   .filter(futureAction => futureAction.type === 'FETCH_PIPELINES'));\n    })\n  );","const initialState = {\n    isAuthenticated: false,\n    token: null,\n}\n\nconst auth = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOGIN_SUCCESS':\n            return {\n                isAuthenticated: true,\n                token: action.token,\n            }\n        case 'LOGOUT':\n            return initialState;\n        default:\n            return state;\n    }\n};\n\nexport default auth;\n  ","const initialState = {\n  list: [],\n  loading: false,\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n      case 'FETCH_PROJECTS':\n        return {\n          ...state,\n          loading: true,\n        };\n      case 'FETCH_PROJECTS_SUCCESS':\n        return {\n          loading: false,\n          list: [\n            ...state.list,\n            ...action.response,\n          ]\n        }\n      case 'FETCH_PROJECTS_FAIL':\n        return {\n          ...state,\n          loading: false,\n        };\n      default:\n        return state;\n    }\n  };\n  ","import { combineReducers } from 'redux';\nimport auth from './auth';\nimport pipelines from './pipelines';\nimport projects from './projects';\nimport user from './user';\n\nexport default combineReducers({\n    auth,\n    projects,\n    pipelines,\n    user,\n});","export default (state = {}, action) => {\n    switch (action.type) {\n      case 'FETCH_USER_SUCCESS':\n        return {\n          ...state,\n          ...action.response,\n        };\n      case 'FETCH_USER_FAIL':\n        return state;\n      default:\n        return state;\n    }\n  };","/* @flow */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { loadState, saveState } from './localStorage';\n\nimport rootEpic from './epics/';\nimport appReducer from './reducers';\n\nconst persistedState = loadState();\n\nexport default () => {\n  const epicMiddleware = createEpicMiddleware();\n\n  const middleWares = [\n    epicMiddleware,\n  ];\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  /* eslint-enable */\n\n  const store = createStore(appReducer, persistedState, composeEnhancers(\n    applyMiddleware(...middleWares)\n  ));\n\n  // store.subscribe(() => {\n  //   saveState({\n  //     auth: store.getState().auth,\n  //   });\n  // });\n    \n  epicMiddleware.run(rootEpic);\n\n  return store;\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Layout from './components/Layout/index';\nimport configureStore from './configureStore';\n\nconst store = configureStore();\n\nconst App = () => (\n  <Provider store={store}>\n    <Layout />\n  </Provider>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}